"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotswapMockSdkProvider = exports.stackSummaryOf = exports.setCurrentCfnStackTemplate = exports.pushStackResourceSummaries = exports.cdkStackArtifactOf = exports.setupHotswapTests = exports.STACK_ID = void 0;
const deployments = require("../../../lib/api/hotswap-deployments");
const util_1 = require("../../util");
const mock_sdk_1 = require("../../util/mock-sdk");
const fake_cloudformation_stack_1 = require("../fake-cloudformation-stack");
const STACK_NAME = 'withouterrors';
exports.STACK_ID = 'stackId';
let hotswapMockSdkProvider;
let currentCfnStack;
const currentCfnStackResources = [];
function setupHotswapTests() {
    jest.resetAllMocks();
    // clear the array
    currentCfnStackResources.splice(0);
    hotswapMockSdkProvider = new HotswapMockSdkProvider();
    currentCfnStack = new fake_cloudformation_stack_1.FakeCloudformationStack({
        stackName: STACK_NAME,
        stackId: exports.STACK_ID,
    });
    return hotswapMockSdkProvider;
}
exports.setupHotswapTests = setupHotswapTests;
function cdkStackArtifactOf(testStackArtifact = {}) {
    return util_1.testStack({
        stackName: STACK_NAME,
        ...testStackArtifact,
    });
}
exports.cdkStackArtifactOf = cdkStackArtifactOf;
function pushStackResourceSummaries(...items) {
    currentCfnStackResources.push(...items);
}
exports.pushStackResourceSummaries = pushStackResourceSummaries;
function setCurrentCfnStackTemplate(template) {
    const templateDeepCopy = JSON.parse(JSON.stringify(template)); // deep copy the template, so our tests can mutate one template instead of creating two
    currentCfnStack.setTemplate(templateDeepCopy);
}
exports.setCurrentCfnStackTemplate = setCurrentCfnStackTemplate;
function stackSummaryOf(logicalId, resourceType, physicalResourceId) {
    return {
        LogicalResourceId: logicalId,
        PhysicalResourceId: physicalResourceId,
        ResourceType: resourceType,
        ResourceStatus: 'CREATE_COMPLETE',
        LastUpdatedTimestamp: new Date(),
    };
}
exports.stackSummaryOf = stackSummaryOf;
class HotswapMockSdkProvider {
    constructor() {
        this.mockSdkProvider = new mock_sdk_1.MockSdkProvider({ realSdk: false });
        this.mockSdkProvider.stubCloudFormation({
            listStackResources: ({ StackName: stackName }) => {
                if (stackName !== STACK_NAME) {
                    throw new Error(`Expected Stack name in listStackResources() call to be: '${STACK_NAME}', but received: ${stackName}'`);
                }
                return {
                    StackResourceSummaries: currentCfnStackResources,
                };
            },
        });
    }
    setUpdateStateMachineMock(mockUpdateMachineDefinition) {
        this.mockSdkProvider.stubStepFunctions({
            updateStateMachine: mockUpdateMachineDefinition,
        });
    }
    stubLambda(stubs, serviceStubs, additionalProperties = {}) {
        this.mockSdkProvider.stubLambda(stubs, {
            api: {
                waiters: {},
            },
            makeRequest() {
                return {
                    promise: () => Promise.resolve({}),
                    response: {},
                    addListeners: () => { },
                };
            },
            ...serviceStubs,
            ...additionalProperties,
        });
    }
    getLambdaApiWaiters() {
        return this.mockSdkProvider.sdk.lambda().api.waiters;
    }
    setUpdateProjectMock(mockUpdateProject) {
        this.mockSdkProvider.stubCodeBuild({
            updateProject: mockUpdateProject,
        });
    }
    stubAppSync(stubs) {
        this.mockSdkProvider.stubAppSync(stubs);
    }
    setInvokeLambdaMock(mockInvokeLambda) {
        this.mockSdkProvider.stubLambda({
            invoke: mockInvokeLambda,
        });
    }
    stubEcs(stubs, additionalProperties = {}) {
        this.mockSdkProvider.stubEcs(stubs, additionalProperties);
    }
    stubGetEndpointSuffix(stub) {
        this.mockSdkProvider.stubGetEndpointSuffix(stub);
    }
    tryHotswapDeployment(stackArtifact, assetParams = {}) {
        return deployments.tryHotswapDeployment(this.mockSdkProvider, assetParams, currentCfnStack, stackArtifact);
    }
}
exports.HotswapMockSdkProvider = HotswapMockSdkProvider;
//# sourceMappingURL=data:application/json;base64,