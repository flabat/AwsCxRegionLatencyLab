"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFormationDeployments = exports.prepareSdkWithLookupRoleFor = void 0;
const path = require("path");
const cxapi = require("@aws-cdk/cx-api");
const cdk_assets_1 = require("cdk-assets");
const fs = require("fs-extra");
const logging_1 = require("../logging");
const asset_publishing_1 = require("../util/asset-publishing");
const credentials_1 = require("./aws-auth/credentials");
const deploy_stack_1 = require("./deploy-stack");
const evaluate_cloudformation_template_1 = require("./evaluate-cloudformation-template");
const toolkit_info_1 = require("./toolkit-info");
const cloudformation_1 = require("./util/cloudformation");
const placeholders_1 = require("./util/placeholders");
/**
  * Try to use the bootstrap lookupRole. There are two scenarios that are handled here
  *  1. The lookup role may not exist (it was added in bootstrap stack version 7)
  *  2. The lookup role may not have the correct permissions (ReadOnlyAccess was added in
  *      bootstrap stack version 8)
  *
  * In the case of 1 (lookup role doesn't exist) `forEnvironment` will either:
  *   1. Return the default credentials if the default credentials are for the stack account
  *   2. Throw an error if the default credentials are not for the stack account.
  *
  * If we successfully assume the lookup role we then proceed to 2 and check whether the bootstrap
  * stack version is valid. If it is not we throw an error which should be handled in the calling
  * function (and fallback to use a different role, etc)
  *
  * If we do not successfully assume the lookup role, but do get back the default credentials
  * then return those and note that we are returning the default credentials. The calling
  * function can then decide to use them or fallback to another role.
  */
async function prepareSdkWithLookupRoleFor(sdkProvider, stack) {
    var _a, _b, _c, _d, _e;
    const resolvedEnvironment = await sdkProvider.resolveEnvironment(stack.environment);
    // Substitute any placeholders with information about the current environment
    const arns = await placeholders_1.replaceEnvPlaceholders({
        lookupRoleArn: (_a = stack.lookupRole) === null || _a === void 0 ? void 0 : _a.arn,
    }, resolvedEnvironment, sdkProvider);
    // try to assume the lookup role
    const warningMessage = `Could not assume ${arns.lookupRoleArn}, proceeding anyway.`;
    const upgradeMessage = `(To get rid of this warning, please upgrade to bootstrap version >= ${(_b = stack.lookupRole) === null || _b === void 0 ? void 0 : _b.requiresBootstrapStackVersion})`;
    try {
        const stackSdk = await sdkProvider.forEnvironment(resolvedEnvironment, credentials_1.Mode.ForReading, {
            assumeRoleArn: arns.lookupRoleArn,
            assumeRoleExternalId: (_c = stack.lookupRole) === null || _c === void 0 ? void 0 : _c.assumeRoleExternalId,
        });
        // if we succeed in assuming the lookup role, make sure we have the correct bootstrap stack version
        if (stackSdk.didAssumeRole && ((_d = stack.lookupRole) === null || _d === void 0 ? void 0 : _d.bootstrapStackVersionSsmParameter) && stack.lookupRole.requiresBootstrapStackVersion) {
            const version = await toolkit_info_1.ToolkitInfo.versionFromSsmParameter(stackSdk.sdk, stack.lookupRole.bootstrapStackVersionSsmParameter);
            if (version < stack.lookupRole.requiresBootstrapStackVersion) {
                throw new Error(`Bootstrap stack version '${stack.lookupRole.requiresBootstrapStackVersion}' is required, found version '${version}'.`);
            }
            // we may not have assumed the lookup role because one was not provided
            // if that is the case then don't print the upgrade warning
        }
        else if (!stackSdk.didAssumeRole && ((_e = stack.lookupRole) === null || _e === void 0 ? void 0 : _e.requiresBootstrapStackVersion)) {
            logging_1.warning(upgradeMessage);
        }
        return { ...stackSdk, resolvedEnvironment };
    }
    catch (e) {
        logging_1.debug(e);
        // only print out the warnings if the lookupRole exists AND there is a required
        // bootstrap version, otherwise the warnings will print `undefined`
        if (stack.lookupRole && stack.lookupRole.requiresBootstrapStackVersion) {
            logging_1.warning(warningMessage);
            logging_1.warning(upgradeMessage);
        }
        throw (e);
    }
}
exports.prepareSdkWithLookupRoleFor = prepareSdkWithLookupRoleFor;
/**
 * Helper class for CloudFormation deployments
 *
 * Looks us the right SDK and Bootstrap stack to deploy a given
 * stack artifact.
 */
class CloudFormationDeployments {
    constructor(props) {
        this.sdkProvider = props.sdkProvider;
    }
    async readCurrentTemplateWithNestedStacks(rootStackArtifact) {
        const sdk = await this.prepareSdkWithLookupOrDeployRole(rootStackArtifact);
        const deployedTemplate = await this.readCurrentTemplate(rootStackArtifact, sdk);
        await this.addNestedTemplatesToGeneratedAndDeployedStacks(rootStackArtifact, sdk, {
            generatedTemplate: rootStackArtifact.template,
            deployedTemplate: deployedTemplate,
            deployedStackName: rootStackArtifact.stackName,
        });
        return deployedTemplate;
    }
    async readCurrentTemplate(stackArtifact, sdk) {
        logging_1.debug(`Reading existing template for stack ${stackArtifact.displayName}.`);
        if (!sdk) {
            sdk = await this.prepareSdkWithLookupOrDeployRole(stackArtifact);
        }
        return this.readCurrentStackTemplate(stackArtifact.stackName, sdk);
    }
    async deployStack(options) {
        const { stackSdk, resolvedEnvironment, cloudFormationRoleArn } = await this.prepareSdkFor(options.stack, options.roleArn);
        const toolkitInfo = await toolkit_info_1.ToolkitInfo.lookup(resolvedEnvironment, stackSdk, options.toolkitStackName);
        // Publish any assets before doing the actual deploy
        await this.publishStackAssets(options.stack, toolkitInfo);
        // Do a verification of the bootstrap stack version
        await this.validateBootstrapStackVersion(options.stack.stackName, options.stack.requiresBootstrapStackVersion, options.stack.bootstrapStackVersionSsmParameter, toolkitInfo);
        return deploy_stack_1.deployStack({
            stack: options.stack,
            resolvedEnvironment,
            deployName: options.deployName,
            notificationArns: options.notificationArns,
            quiet: options.quiet,
            sdk: stackSdk,
            sdkProvider: this.sdkProvider,
            roleArn: cloudFormationRoleArn,
            reuseAssets: options.reuseAssets,
            toolkitInfo,
            tags: options.tags,
            execute: options.execute,
            changeSetName: options.changeSetName,
            force: options.force,
            parameters: options.parameters,
            usePreviousParameters: options.usePreviousParameters,
            progress: options.progress,
            ci: options.ci,
            rollback: options.rollback,
            hotswap: options.hotswap,
            extraUserAgent: options.extraUserAgent,
        });
    }
    async destroyStack(options) {
        const { stackSdk, cloudFormationRoleArn: roleArn } = await this.prepareSdkFor(options.stack, options.roleArn);
        return deploy_stack_1.destroyStack({
            sdk: stackSdk,
            roleArn,
            stack: options.stack,
            deployName: options.deployName,
            quiet: options.quiet,
        });
    }
    async stackExists(options) {
        var _a;
        const { stackSdk } = await this.prepareSdkFor(options.stack, undefined, credentials_1.Mode.ForReading);
        const stack = await cloudformation_1.CloudFormationStack.lookup(stackSdk.cloudFormation(), (_a = options.deployName) !== null && _a !== void 0 ? _a : options.stack.stackName);
        return stack.exists;
    }
    async prepareSdkWithLookupOrDeployRole(stackArtifact) {
        // try to assume the lookup role
        try {
            const result = await prepareSdkWithLookupRoleFor(this.sdkProvider, stackArtifact);
            if (result.didAssumeRole) {
                return result.sdk;
            }
        }
        catch (_a) { }
        // fall back to the deploy role
        return (await this.prepareSdkFor(stackArtifact, undefined, credentials_1.Mode.ForReading)).stackSdk;
    }
    async readCurrentStackTemplate(stackName, stackSdk) {
        const cfn = stackSdk.cloudFormation();
        const stack = await cloudformation_1.CloudFormationStack.lookup(cfn, stackName);
        return stack.template();
    }
    async addNestedTemplatesToGeneratedAndDeployedStacks(rootStackArtifact, sdk, parentTemplates) {
        var _a, _b, _c, _d, _e;
        const listStackResources = parentTemplates.deployedStackName ? new evaluate_cloudformation_template_1.LazyListStackResources(sdk, parentTemplates.deployedStackName) : undefined;
        for (const [nestedStackLogicalId, generatedNestedStackResource] of Object.entries((_a = parentTemplates.generatedTemplate.Resources) !== null && _a !== void 0 ? _a : {})) {
            if (!this.isCdkManagedNestedStack(generatedNestedStackResource)) {
                continue;
            }
            const assetPath = generatedNestedStackResource.Metadata['aws:asset:path'];
            const nestedStackTemplates = await this.getNestedStackTemplates(rootStackArtifact, assetPath, nestedStackLogicalId, listStackResources, sdk);
            generatedNestedStackResource.Properties.NestedTemplate = nestedStackTemplates.generatedTemplate;
            const deployedParentTemplate = parentTemplates.deployedTemplate;
            deployedParentTemplate.Resources = (_b = deployedParentTemplate.Resources) !== null && _b !== void 0 ? _b : {};
            const deployedNestedStackResource = (_c = deployedParentTemplate.Resources[nestedStackLogicalId]) !== null && _c !== void 0 ? _c : {};
            deployedParentTemplate.Resources[nestedStackLogicalId] = deployedNestedStackResource;
            deployedNestedStackResource.Type = (_d = deployedNestedStackResource.Type) !== null && _d !== void 0 ? _d : 'AWS::CloudFormation::Stack';
            deployedNestedStackResource.Properties = (_e = deployedNestedStackResource.Properties) !== null && _e !== void 0 ? _e : {};
            deployedNestedStackResource.Properties.NestedTemplate = nestedStackTemplates.deployedTemplate;
            await this.addNestedTemplatesToGeneratedAndDeployedStacks(rootStackArtifact, sdk, nestedStackTemplates);
        }
    }
    async getNestedStackTemplates(rootStackArtifact, nestedTemplateAssetPath, nestedStackLogicalId, listStackResources, sdk) {
        const nestedTemplatePath = path.join(rootStackArtifact.assembly.directory, nestedTemplateAssetPath);
        // CFN generates the nested stack name in the form `ParentStackName-NestedStackLogicalID-SomeHashWeCan'tCompute,
        // the arn is of the form: arn:aws:cloudformation:region:123456789012:stack/NestedStackName/AnotherHashWeDon'tNeed
        // so we get the ARN and manually extract the name.
        const nestedStackArn = await this.getNestedStackArn(nestedStackLogicalId, listStackResources);
        const deployedStackName = nestedStackArn === null || nestedStackArn === void 0 ? void 0 : nestedStackArn.slice(nestedStackArn.indexOf('/') + 1, nestedStackArn.lastIndexOf('/'));
        return {
            generatedTemplate: JSON.parse(fs.readFileSync(nestedTemplatePath, 'utf-8')),
            deployedTemplate: deployedStackName
                ? await this.readCurrentStackTemplate(deployedStackName, sdk)
                : {},
            deployedStackName,
        };
    }
    async getNestedStackArn(nestedStackLogicalId, listStackResources) {
        var _a;
        try {
            const stackResources = await (listStackResources === null || listStackResources === void 0 ? void 0 : listStackResources.listStackResources());
            return (_a = stackResources === null || stackResources === void 0 ? void 0 : stackResources.find(sr => sr.LogicalResourceId === nestedStackLogicalId)) === null || _a === void 0 ? void 0 : _a.PhysicalResourceId;
        }
        catch (e) {
            if (e.message.startsWith('Stack with id ') && e.message.endsWith(' does not exist')) {
                return;
            }
            throw e;
        }
    }
    isCdkManagedNestedStack(stackResource) {
        return stackResource.Type === 'AWS::CloudFormation::Stack' && stackResource.Metadata && stackResource.Metadata['aws:asset:path'];
    }
    /**
     * Get the environment necessary for touching the given stack
     *
     * Returns the following:
     *
     * - The resolved environment for the stack (no more 'unknown-account/unknown-region')
     * - SDK loaded with the right credentials for calling `CreateChangeSet`.
     * - The Execution Role that should be passed to CloudFormation.
     */
    async prepareSdkFor(stack, roleArn, mode = credentials_1.Mode.ForWriting) {
        if (!stack.environment) {
            throw new Error(`The stack ${stack.displayName} does not have an environment`);
        }
        const resolvedEnvironment = await this.sdkProvider.resolveEnvironment(stack.environment);
        // Substitute any placeholders with information about the current environment
        const arns = await placeholders_1.replaceEnvPlaceholders({
            assumeRoleArn: stack.assumeRoleArn,
            // Use the override if given, otherwise use the field from the stack
            cloudFormationRoleArn: roleArn !== null && roleArn !== void 0 ? roleArn : stack.cloudFormationExecutionRoleArn,
        }, resolvedEnvironment, this.sdkProvider);
        const stackSdk = await this.sdkProvider.forEnvironment(resolvedEnvironment, mode, {
            assumeRoleArn: arns.assumeRoleArn,
            assumeRoleExternalId: stack.assumeRoleExternalId,
        });
        return {
            stackSdk: stackSdk.sdk,
            resolvedEnvironment,
            cloudFormationRoleArn: arns.cloudFormationRoleArn,
        };
    }
    /**
     * Publish all asset manifests that are referenced by the given stack
     */
    async publishStackAssets(stack, toolkitInfo) {
        const stackEnv = await this.sdkProvider.resolveEnvironment(stack.environment);
        const assetArtifacts = stack.dependencies.filter(isAssetManifestArtifact);
        for (const assetArtifact of assetArtifacts) {
            await this.validateBootstrapStackVersion(stack.stackName, assetArtifact.requiresBootstrapStackVersion, assetArtifact.bootstrapStackVersionSsmParameter, toolkitInfo);
            const manifest = cdk_assets_1.AssetManifest.fromFile(assetArtifact.file);
            await asset_publishing_1.publishAssets(manifest, this.sdkProvider, stackEnv);
        }
    }
    /**
     * Validate that the bootstrap stack has the right version for this stack
     */
    async validateBootstrapStackVersion(stackName, requiresBootstrapStackVersion, bootstrapStackVersionSsmParameter, toolkitInfo) {
        if (requiresBootstrapStackVersion === undefined) {
            return;
        }
        try {
            await toolkitInfo.validateVersion(requiresBootstrapStackVersion, bootstrapStackVersionSsmParameter);
        }
        catch (e) {
            throw new Error(`${stackName}: ${e.message}`);
        }
    }
}
exports.CloudFormationDeployments = CloudFormationDeployments;
function isAssetManifestArtifact(art) {
    return art instanceof cxapi.AssetManifestArtifact;
}
//# sourceMappingURL=data:application/json;base64,